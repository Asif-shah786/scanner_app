import 'package:camera/camera.dart';
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:scanner/generated/l10n.dart';
import 'package:scanner/modules/home/data/datasources/card_datasource.dart';
import 'package:scanner/modules/home/presentation/scanner/scanner_page.dart';
import 'package:scanner/services/analytics/posthog.dart';
import 'package:scanner/services/image/image_saver.dart';
import 'package:scanner/services/navigation/routes.dart';
import 'package:scanner/utils/pallets.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  cameras = await availableCameras();

  appDir = await getApplicationDocumentsDirectory();

  await CardDataRepo().initIsar();

  packageInfo = await PackageInfo.fromPlatform();

  runApp(const ProviderScope(child: MyApp()));
}

/// Documentation for methodName
/// > * _`@param: [T]`_ - paramName
///
/// > _`@returns: [T]`_
class MyApp extends StatelessWidget {
  /// Documentation for methodName
  /// > * _`@param: [T]`_ - paramName
  ///
  /// > _`@returns: [T]`_
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        FocusManager.instance.primaryFocus?.unfocus();
      },
      child: MaterialApp.router(
        title: 'Spreadly Scan',
        localizationsDelegates: const [
          S.delegate, // This S class will be generated by flutter_intl
          GlobalMaterialLocalizations.delegate,
          GlobalWidgetsLocalizations.delegate,
          GlobalCupertinoLocalizations.delegate,
        ],
        supportedLocales: const [
          Locale('en'), // English
          Locale('de'), // German
        ],
        theme: ThemeData(
          colorScheme: Pallets.scheme,
          useMaterial3: true,
          textTheme: const TextTheme(
            headlineMedium: TextStyle(
              fontSize: 28,
            ),
            titleMedium: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
            bodyLarge: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
            labelMedium: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w500,
            ),
            labelLarge: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w600,
            ),
            bodyMedium: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w400,
            ),
            bodySmall: TextStyle(
              fontSize: 12,
            ),
          ),
        ),
        routerConfig: CustomRoutes.goRouter,
      ),
    );
  }
}
